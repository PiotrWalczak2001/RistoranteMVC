// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RistoranteMVC.Models;

namespace RistoranteMVC.Migrations
{
    [DbContext(typeof(RistoranteMVCDbContext))]
    [Migration("20211014144437_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "DAFF313F-89DD-4621-BC3F-B6EE1F2A23C6",
                            ConcurrencyStamp = "c8594eb9-e8fc-4f9e-8cf9-a122ffc7d837",
                            Name = "Admin",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("RistoranteMVC.Auth.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("RistoranteMVC.Models.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("9bcd1113-6b23-4493-bc83-0c80a436430a"),
                            Name = "Pizzas"
                        },
                        new
                        {
                            CategoryId = new Guid("a4b49c2f-93b6-42c7-99c6-524638667afd"),
                            Name = "Pastas"
                        },
                        new
                        {
                            CategoryId = new Guid("c85f1ad9-cef4-4bab-94da-e4dfb466c158"),
                            Name = "Soups"
                        },
                        new
                        {
                            CategoryId = new Guid("10895537-2732-403b-87dc-047ec2535593"),
                            Name = "Desserts"
                        },
                        new
                        {
                            CategoryId = new Guid("d99c5243-4815-4722-9fe3-e27623b8232b"),
                            Name = "Drinks"
                        });
                });

            modelBuilder.Entity("RistoranteMVC.Models.Dish", b =>
                {
                    b.Property<Guid>("DishId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Kcal")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Recommended")
                        .HasColumnType("bit");

                    b.HasKey("DishId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Dishes");

                    b.HasData(
                        new
                        {
                            DishId = new Guid("14849acc-cc85-41b4-8766-494262635eca"),
                            CategoryId = new Guid("9bcd1113-6b23-4493-bc83-0c80a436430a"),
                            Description = "Delicious classic from the pizza family",
                            ImageUrl = "https://cdn.pixabay.com/photo/2016/09/13/18/38/silverware-1667988_960_720.png",
                            Kcal = 600,
                            Name = "Pizza margherita",
                            Price = 25.99m,
                            Recommended = true
                        },
                        new
                        {
                            DishId = new Guid("c48dcf3e-1dc0-4dd7-8337-69d51feff5bc"),
                            CategoryId = new Guid("9bcd1113-6b23-4493-bc83-0c80a436430a"),
                            Description = "The best for meetings with friends",
                            ImageUrl = "https://cdn.pixabay.com/photo/2016/09/13/18/38/silverware-1667988_960_720.png",
                            Kcal = 750,
                            Name = "Pizza salami",
                            Price = 31.50m,
                            Recommended = false
                        },
                        new
                        {
                            DishId = new Guid("092ac275-7d68-42f3-8e23-2385788ae304"),
                            CategoryId = new Guid("9bcd1113-6b23-4493-bc83-0c80a436430a"),
                            Description = "American pizza in the Italian version",
                            ImageUrl = "https://cdn.pixabay.com/photo/2016/09/13/18/38/silverware-1667988_960_720.png",
                            Kcal = 800,
                            Name = "Pizza americana",
                            Price = 32.20m,
                            Recommended = false
                        },
                        new
                        {
                            DishId = new Guid("dc0cc3ac-ce43-4635-832b-10ff23fa1495"),
                            CategoryId = new Guid("9bcd1113-6b23-4493-bc83-0c80a436430a"),
                            Description = "the best cheeses on your favorite pizza",
                            ImageUrl = "https://cdn.pixabay.com/photo/2016/09/13/18/38/silverware-1667988_960_720.png",
                            Kcal = 900,
                            Name = "Four cheeses pizza",
                            Price = 33.90m,
                            Recommended = false
                        },
                        new
                        {
                            DishId = new Guid("88b9c79c-1409-456d-ba43-cdc90e67e289"),
                            CategoryId = new Guid("a4b49c2f-93b6-42c7-99c6-524638667afd"),
                            Description = "The best pasta with classic bolognese sauce",
                            ImageUrl = "https://cdn.pixabay.com/photo/2016/09/13/18/38/silverware-1667988_960_720.png",
                            Kcal = 450,
                            Name = "Spaghetti bolognese",
                            Price = 18.20m,
                            Recommended = false
                        },
                        new
                        {
                            DishId = new Guid("110d8eaa-25b5-47aa-8168-030a9fda783e"),
                            CategoryId = new Guid("a4b49c2f-93b6-42c7-99c6-524638667afd"),
                            Description = "Our kitchen's bestseller",
                            ImageUrl = "https://cdn.pixabay.com/photo/2016/09/13/18/38/silverware-1667988_960_720.png",
                            Kcal = 550,
                            Name = "Spaghetti carbonara",
                            Price = 19.99m,
                            Recommended = true
                        },
                        new
                        {
                            DishId = new Guid("0dc345ab-cb02-4fe2-837b-814e383f70db"),
                            CategoryId = new Guid("a4b49c2f-93b6-42c7-99c6-524638667afd"),
                            Description = "For more hunger",
                            ImageUrl = "https://cdn.pixabay.com/photo/2016/09/13/18/38/silverware-1667988_960_720.png",
                            Kcal = 840,
                            Name = "Lasagne",
                            Price = 36.99m,
                            Recommended = false
                        },
                        new
                        {
                            DishId = new Guid("66ccba18-2e43-4e85-9e4c-9507d9ad8f22"),
                            CategoryId = new Guid("a4b49c2f-93b6-42c7-99c6-524638667afd"),
                            Description = "This taste will surprise you",
                            ImageUrl = "https://cdn.pixabay.com/photo/2016/09/13/18/38/silverware-1667988_960_720.png",
                            Kcal = 410,
                            Name = "Tagliatelle with spinach",
                            Price = 19.99m,
                            Recommended = false
                        },
                        new
                        {
                            DishId = new Guid("2473317c-36ba-4d81-8232-8897f830caca"),
                            CategoryId = new Guid("c85f1ad9-cef4-4bab-94da-e4dfb466c158"),
                            Description = "Its taste comes from the best ingredients",
                            ImageUrl = "https://cdn.pixabay.com/photo/2016/09/13/18/38/silverware-1667988_960_720.png",
                            Kcal = 180,
                            Name = "Creamy tomato soup",
                            Price = 12.99m,
                            Recommended = true
                        },
                        new
                        {
                            DishId = new Guid("472f8c7e-c560-41b0-a816-c5dda1beafd7"),
                            CategoryId = new Guid("c85f1ad9-cef4-4bab-94da-e4dfb466c158"),
                            Description = "Our novelty",
                            ImageUrl = "https://cdn.pixabay.com/photo/2016/09/13/18/38/silverware-1667988_960_720.png",
                            Kcal = 210,
                            Name = "Curry soup",
                            Price = 13.30m,
                            Recommended = false
                        },
                        new
                        {
                            DishId = new Guid("96601e4f-bab3-4a8b-873f-eda798c8a683"),
                            CategoryId = new Guid("c85f1ad9-cef4-4bab-94da-e4dfb466c158"),
                            Description = "Tasty and nutritious",
                            ImageUrl = "https://cdn.pixabay.com/photo/2016/09/13/18/38/silverware-1667988_960_720.png",
                            Kcal = 210,
                            Name = "Soup with meatballs",
                            Price = 15.95m,
                            Recommended = false
                        },
                        new
                        {
                            DishId = new Guid("2d18db44-b812-44b3-9eab-7a3dd31b5dfe"),
                            CategoryId = new Guid("c85f1ad9-cef4-4bab-94da-e4dfb466c158"),
                            Description = "Very aromatic dish that will delight everyone",
                            ImageUrl = "https://cdn.pixabay.com/photo/2016/09/13/18/38/silverware-1667988_960_720.png",
                            Kcal = 210,
                            Name = "Mushroom soup",
                            Price = 14.49m,
                            Recommended = false
                        },
                        new
                        {
                            DishId = new Guid("f278f545-72e5-4455-84ea-c93b1658d1ec"),
                            CategoryId = new Guid("10895537-2732-403b-87dc-047ec2535593"),
                            Description = "The best dessert that will impress your other half",
                            ImageUrl = "https://cdn.pixabay.com/photo/2016/09/13/18/38/silverware-1667988_960_720.png",
                            Kcal = 300,
                            Name = "Tiramisu",
                            Price = 10.50m,
                            Recommended = true
                        },
                        new
                        {
                            DishId = new Guid("f330dd1e-4d8a-4317-95ad-84afad8aa5ee"),
                            CategoryId = new Guid("10895537-2732-403b-87dc-047ec2535593"),
                            Description = "Melts in your mouth",
                            ImageUrl = "https://cdn.pixabay.com/photo/2016/09/13/18/38/silverware-1667988_960_720.png",
                            Kcal = 290,
                            Name = "Panna Cotta",
                            Price = 10.40m,
                            Recommended = false
                        },
                        new
                        {
                            DishId = new Guid("1e73f4aa-5115-4bd9-be16-255c4898e789"),
                            CategoryId = new Guid("10895537-2732-403b-87dc-047ec2535593"),
                            Description = "Sweet and cold what more could you want",
                            ImageUrl = "https://cdn.pixabay.com/photo/2016/09/13/18/38/silverware-1667988_960_720.png",
                            Kcal = 260,
                            Name = "Ice-creams",
                            Price = 9.10m,
                            Recommended = false
                        },
                        new
                        {
                            DishId = new Guid("4e8a7dd7-9954-4f92-824c-a81454e1c247"),
                            CategoryId = new Guid("10895537-2732-403b-87dc-047ec2535593"),
                            Description = "It is worth a try",
                            ImageUrl = "https://cdn.pixabay.com/photo/2016/09/13/18/38/silverware-1667988_960_720.png",
                            Kcal = 270,
                            Name = "Granita",
                            Price = 10.05m,
                            Recommended = false
                        },
                        new
                        {
                            DishId = new Guid("df9e7226-4df1-46cf-84bb-74128ca8ac5a"),
                            CategoryId = new Guid("d99c5243-4815-4722-9fe3-e27623b8232b"),
                            Description = "Just good coffee",
                            ImageUrl = "https://cdn.pixabay.com/photo/2016/09/13/18/38/silverware-1667988_960_720.png",
                            Kcal = 10,
                            Name = "Coffee",
                            Price = 12.99m,
                            Recommended = true
                        },
                        new
                        {
                            DishId = new Guid("b2c50814-3222-4e2d-b3e0-f7c0f66a717a"),
                            CategoryId = new Guid("d99c5243-4815-4722-9fe3-e27623b8232b"),
                            Description = "Just good tea",
                            ImageUrl = "https://cdn.pixabay.com/photo/2016/09/13/18/38/silverware-1667988_960_720.png",
                            Kcal = 10,
                            Name = "Tea",
                            Price = 12.99m,
                            Recommended = false
                        },
                        new
                        {
                            DishId = new Guid("40dd5d10-a7a7-405b-b984-1fdc90ccc67a"),
                            CategoryId = new Guid("d99c5243-4815-4722-9fe3-e27623b8232b"),
                            Description = "Just water",
                            ImageUrl = "https://cdn.pixabay.com/photo/2016/09/13/18/38/silverware-1667988_960_720.png",
                            Kcal = 10,
                            Name = "Water",
                            Price = 12.99m,
                            Recommended = false
                        },
                        new
                        {
                            DishId = new Guid("cf82c88a-8753-42af-b4b3-7b246868f52e"),
                            CategoryId = new Guid("d99c5243-4815-4722-9fe3-e27623b8232b"),
                            Description = "Just Coca-Cola",
                            ImageUrl = "https://cdn.pixabay.com/photo/2016/09/13/18/38/silverware-1667988_960_720.png",
                            Kcal = 110,
                            Name = "Coca-Cola",
                            Price = 12.99m,
                            Recommended = false
                        });
                });

            modelBuilder.Entity("RistoranteMVC.Models.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderPlaced")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OrderTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("RistoranteMVC.Models.OrderDetail", b =>
                {
                    b.Property<Guid>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<Guid>("DishId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("DishId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("RistoranteMVC.Models.ShoppingCartItem", b =>
                {
                    b.Property<Guid>("ShoppingCartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<Guid?>("DishId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ShoppingCartId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ShoppingCartItemId");

                    b.HasIndex("DishId");

                    b.ToTable("ShoppingCartItems");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("RistoranteMVC.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("RistoranteMVC.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RistoranteMVC.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("RistoranteMVC.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RistoranteMVC.Models.Dish", b =>
                {
                    b.HasOne("RistoranteMVC.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("RistoranteMVC.Models.OrderDetail", b =>
                {
                    b.HasOne("RistoranteMVC.Models.Dish", "Dish")
                        .WithMany()
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RistoranteMVC.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("RistoranteMVC.Models.ShoppingCartItem", b =>
                {
                    b.HasOne("RistoranteMVC.Models.Dish", "Dish")
                        .WithMany()
                        .HasForeignKey("DishId");

                    b.Navigation("Dish");
                });

            modelBuilder.Entity("RistoranteMVC.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
