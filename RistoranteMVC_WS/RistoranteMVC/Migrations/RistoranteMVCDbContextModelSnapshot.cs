// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RistoranteMVC.Models;

namespace RistoranteMVC.Migrations
{
    [DbContext(typeof(RistoranteMVCDbContext))]
    partial class RistoranteMVCDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "DAFF313F-89DD-4621-BC3F-B6EE1F2A23C6",
                            ConcurrencyStamp = "0e58aecc-e646-4ac9-aa1b-30b394b5ad8b",
                            Name = "Admin",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "D174C90E-6C1D-452C-B91F-CA39C112B73E",
                            RoleId = "DAFF313F-89DD-4621-BC3F-B6EE1F2A23C6"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("RistoranteMVC.Auth.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "D174C90E-6C1D-452C-B91F-CA39C112B73E",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4c33c472-3703-4baf-95bd-8980ce368de5",
                            Email = "admin@mail.com",
                            EmailConfirmed = true,
                            FirstName = "Janeczek",
                            LastName = "Adminowy",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@MAIL.COM",
                            NormalizedUserName = "JANECZEK",
                            PasswordHash = "AQAAAAEAACcQAAAAEMNDTvZPNYq01BZgw0OVjd7AlSzcAdgvkdNBTPMOMU/bWIicpdxHcGHdituW0lC3lw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4bb0b0d4-3774-4852-9002-367993eaf9ee",
                            TwoFactorEnabled = false,
                            UserName = "Janeczek"
                        });
                });

            modelBuilder.Entity("RistoranteMVC.Models.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("9bcd1113-6b23-4493-bc83-0c80a436430a"),
                            Name = "Pizzas"
                        },
                        new
                        {
                            CategoryId = new Guid("a4b49c2f-93b6-42c7-99c6-524638667afd"),
                            Name = "Pastas"
                        },
                        new
                        {
                            CategoryId = new Guid("c85f1ad9-cef4-4bab-94da-e4dfb466c158"),
                            Name = "Soups"
                        },
                        new
                        {
                            CategoryId = new Guid("10895537-2732-403b-87dc-047ec2535593"),
                            Name = "Desserts"
                        },
                        new
                        {
                            CategoryId = new Guid("d99c5243-4815-4722-9fe3-e27623b8232b"),
                            Name = "Drinks"
                        });
                });

            modelBuilder.Entity("RistoranteMVC.Models.Dish", b =>
                {
                    b.Property<Guid>("DishId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Kcal")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Recommended")
                        .HasColumnType("bit");

                    b.HasKey("DishId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Dishes");

                    b.HasData(
                        new
                        {
                            DishId = new Guid("a0ad35ef-635b-4230-ad0a-d1519f0b0c7c"),
                            CategoryId = new Guid("9bcd1113-6b23-4493-bc83-0c80a436430a"),
                            Description = "Delicious classic from the pizza family",
                            ImageUrl = "https://cdn.pixabay.com/photo/2016/09/13/18/38/silverware-1667988_960_720.png",
                            Kcal = 600,
                            Name = "Pizza margherita",
                            Price = 25.99m,
                            Recommended = true
                        },
                        new
                        {
                            DishId = new Guid("8dc7a2e4-af20-41eb-b36f-d94ad3beb4bf"),
                            CategoryId = new Guid("9bcd1113-6b23-4493-bc83-0c80a436430a"),
                            Description = "The best for meetings with friends",
                            ImageUrl = "https://cdn.pixabay.com/photo/2016/09/13/18/38/silverware-1667988_960_720.png",
                            Kcal = 750,
                            Name = "Pizza salami",
                            Price = 31.50m,
                            Recommended = false
                        },
                        new
                        {
                            DishId = new Guid("f0466e0b-222e-489a-815e-eb4f318b6037"),
                            CategoryId = new Guid("9bcd1113-6b23-4493-bc83-0c80a436430a"),
                            Description = "American pizza in the Italian version",
                            ImageUrl = "https://cdn.pixabay.com/photo/2016/09/13/18/38/silverware-1667988_960_720.png",
                            Kcal = 800,
                            Name = "Pizza americana",
                            Price = 32.20m,
                            Recommended = false
                        },
                        new
                        {
                            DishId = new Guid("cdeae544-bae4-4a4d-b509-77214737f60d"),
                            CategoryId = new Guid("9bcd1113-6b23-4493-bc83-0c80a436430a"),
                            Description = "the best cheeses on your favorite pizza",
                            ImageUrl = "https://cdn.pixabay.com/photo/2016/09/13/18/38/silverware-1667988_960_720.png",
                            Kcal = 900,
                            Name = "Four cheeses pizza",
                            Price = 33.90m,
                            Recommended = false
                        },
                        new
                        {
                            DishId = new Guid("0e055b53-a388-4339-a037-841db09f17bc"),
                            CategoryId = new Guid("a4b49c2f-93b6-42c7-99c6-524638667afd"),
                            Description = "The best pasta with classic bolognese sauce",
                            ImageUrl = "https://cdn.pixabay.com/photo/2016/09/13/18/38/silverware-1667988_960_720.png",
                            Kcal = 450,
                            Name = "Spaghetti bolognese",
                            Price = 18.20m,
                            Recommended = false
                        },
                        new
                        {
                            DishId = new Guid("3d8c236a-3f7f-4384-8c10-a81dfcc4439e"),
                            CategoryId = new Guid("a4b49c2f-93b6-42c7-99c6-524638667afd"),
                            Description = "Our kitchen's bestseller",
                            ImageUrl = "https://cdn.pixabay.com/photo/2016/09/13/18/38/silverware-1667988_960_720.png",
                            Kcal = 550,
                            Name = "Spaghetti carbonara",
                            Price = 19.99m,
                            Recommended = true
                        },
                        new
                        {
                            DishId = new Guid("0e21c2f3-dfcd-4504-b6b7-c71ee9c4886c"),
                            CategoryId = new Guid("a4b49c2f-93b6-42c7-99c6-524638667afd"),
                            Description = "For more hunger",
                            ImageUrl = "https://cdn.pixabay.com/photo/2016/09/13/18/38/silverware-1667988_960_720.png",
                            Kcal = 840,
                            Name = "Lasagne",
                            Price = 36.99m,
                            Recommended = false
                        },
                        new
                        {
                            DishId = new Guid("a04b9671-82c3-40d8-b752-f8913b237667"),
                            CategoryId = new Guid("a4b49c2f-93b6-42c7-99c6-524638667afd"),
                            Description = "This taste will surprise you",
                            ImageUrl = "https://cdn.pixabay.com/photo/2016/09/13/18/38/silverware-1667988_960_720.png",
                            Kcal = 410,
                            Name = "Tagliatelle with spinach",
                            Price = 19.99m,
                            Recommended = false
                        },
                        new
                        {
                            DishId = new Guid("e46aa963-cd4c-42ab-a80c-92ba5a272653"),
                            CategoryId = new Guid("c85f1ad9-cef4-4bab-94da-e4dfb466c158"),
                            Description = "Its taste comes from the best ingredients",
                            ImageUrl = "https://cdn.pixabay.com/photo/2016/09/13/18/38/silverware-1667988_960_720.png",
                            Kcal = 180,
                            Name = "Creamy tomato soup",
                            Price = 12.99m,
                            Recommended = true
                        },
                        new
                        {
                            DishId = new Guid("4f4620c3-f1c1-4b6d-845b-211e898b3436"),
                            CategoryId = new Guid("c85f1ad9-cef4-4bab-94da-e4dfb466c158"),
                            Description = "Our novelty",
                            ImageUrl = "https://cdn.pixabay.com/photo/2016/09/13/18/38/silverware-1667988_960_720.png",
                            Kcal = 210,
                            Name = "Curry soup",
                            Price = 13.30m,
                            Recommended = false
                        },
                        new
                        {
                            DishId = new Guid("86411cf0-88e8-4045-9232-c3aec8585736"),
                            CategoryId = new Guid("c85f1ad9-cef4-4bab-94da-e4dfb466c158"),
                            Description = "Tasty and nutritious",
                            ImageUrl = "https://cdn.pixabay.com/photo/2016/09/13/18/38/silverware-1667988_960_720.png",
                            Kcal = 210,
                            Name = "Soup with meatballs",
                            Price = 15.95m,
                            Recommended = false
                        },
                        new
                        {
                            DishId = new Guid("c70b1d34-bc12-4de0-916a-e6885642e7af"),
                            CategoryId = new Guid("c85f1ad9-cef4-4bab-94da-e4dfb466c158"),
                            Description = "Very aromatic dish that will delight everyone",
                            ImageUrl = "https://cdn.pixabay.com/photo/2016/09/13/18/38/silverware-1667988_960_720.png",
                            Kcal = 210,
                            Name = "Mushroom soup",
                            Price = 14.49m,
                            Recommended = false
                        },
                        new
                        {
                            DishId = new Guid("d47e1cac-1d38-4c93-b0d1-7b81fbffc1be"),
                            CategoryId = new Guid("10895537-2732-403b-87dc-047ec2535593"),
                            Description = "The best dessert that will impress your other half",
                            ImageUrl = "https://cdn.pixabay.com/photo/2016/09/13/18/38/silverware-1667988_960_720.png",
                            Kcal = 300,
                            Name = "Tiramisu",
                            Price = 10.50m,
                            Recommended = true
                        },
                        new
                        {
                            DishId = new Guid("3c5c7c76-1d77-4fd8-afc6-8914d187469f"),
                            CategoryId = new Guid("10895537-2732-403b-87dc-047ec2535593"),
                            Description = "Melts in your mouth",
                            ImageUrl = "https://cdn.pixabay.com/photo/2016/09/13/18/38/silverware-1667988_960_720.png",
                            Kcal = 290,
                            Name = "Panna Cotta",
                            Price = 10.40m,
                            Recommended = false
                        },
                        new
                        {
                            DishId = new Guid("ee239c12-9087-4d20-a710-ba82b2f22e28"),
                            CategoryId = new Guid("10895537-2732-403b-87dc-047ec2535593"),
                            Description = "Sweet and cold what more could you want",
                            ImageUrl = "https://cdn.pixabay.com/photo/2016/09/13/18/38/silverware-1667988_960_720.png",
                            Kcal = 260,
                            Name = "Ice-creams",
                            Price = 9.10m,
                            Recommended = false
                        },
                        new
                        {
                            DishId = new Guid("3683ca21-8f12-487f-8945-010927470416"),
                            CategoryId = new Guid("10895537-2732-403b-87dc-047ec2535593"),
                            Description = "It is worth a try",
                            ImageUrl = "https://cdn.pixabay.com/photo/2016/09/13/18/38/silverware-1667988_960_720.png",
                            Kcal = 270,
                            Name = "Granita",
                            Price = 10.05m,
                            Recommended = false
                        },
                        new
                        {
                            DishId = new Guid("37d4da99-b860-4622-a388-de20a9e2d130"),
                            CategoryId = new Guid("d99c5243-4815-4722-9fe3-e27623b8232b"),
                            Description = "Just good coffee",
                            ImageUrl = "https://cdn.pixabay.com/photo/2016/09/13/18/38/silverware-1667988_960_720.png",
                            Kcal = 10,
                            Name = "Coffee",
                            Price = 12.99m,
                            Recommended = true
                        },
                        new
                        {
                            DishId = new Guid("27a5a65d-6743-4435-9c0a-14c915aa088f"),
                            CategoryId = new Guid("d99c5243-4815-4722-9fe3-e27623b8232b"),
                            Description = "Just good tea",
                            ImageUrl = "https://cdn.pixabay.com/photo/2016/09/13/18/38/silverware-1667988_960_720.png",
                            Kcal = 10,
                            Name = "Tea",
                            Price = 12.99m,
                            Recommended = false
                        },
                        new
                        {
                            DishId = new Guid("883c5b6e-5a84-481a-9f1f-39cc2cb5eeaa"),
                            CategoryId = new Guid("d99c5243-4815-4722-9fe3-e27623b8232b"),
                            Description = "Just water",
                            ImageUrl = "https://cdn.pixabay.com/photo/2016/09/13/18/38/silverware-1667988_960_720.png",
                            Kcal = 10,
                            Name = "Water",
                            Price = 12.99m,
                            Recommended = false
                        },
                        new
                        {
                            DishId = new Guid("fd596faa-6989-457f-a93e-c21ceba1d110"),
                            CategoryId = new Guid("d99c5243-4815-4722-9fe3-e27623b8232b"),
                            Description = "Just Coca-Cola",
                            ImageUrl = "https://cdn.pixabay.com/photo/2016/09/13/18/38/silverware-1667988_960_720.png",
                            Kcal = 110,
                            Name = "Coca-Cola",
                            Price = 12.99m,
                            Recommended = false
                        });
                });

            modelBuilder.Entity("RistoranteMVC.Models.Employee", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("JobRole")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            EmployeeId = new Guid("343c45aa-6f76-4e21-a855-4b5c3ad9d2ab"),
                            Address = "Konopnicka 15",
                            BirthDate = new DateTime(2021, 10, 30, 15, 34, 52, 54, DateTimeKind.Local).AddTicks(62),
                            City = "Cracov",
                            Email = "jan@mail.com",
                            FirstName = "Jan",
                            Gender = "Male",
                            HireDate = new DateTime(2021, 10, 30, 15, 34, 52, 57, DateTimeKind.Local).AddTicks(5112),
                            JobRole = "Cook",
                            LastName = "Fajny",
                            PhoneNumber = "111222333",
                            ZipCode = "32-200"
                        },
                        new
                        {
                            EmployeeId = new Guid("a089f74d-8169-45ab-9acd-3c32c56e190a"),
                            Address = "Rydla 59",
                            BirthDate = new DateTime(2021, 10, 30, 15, 34, 52, 57, DateTimeKind.Local).AddTicks(5647),
                            City = "Cracov",
                            Email = "ben@mail.com",
                            FirstName = "Ben",
                            Gender = "Male",
                            HireDate = new DateTime(2021, 10, 30, 15, 34, 52, 57, DateTimeKind.Local).AddTicks(5659),
                            JobRole = "Driver",
                            LastName = "Kierwoca",
                            PhoneNumber = "444222333",
                            ZipCode = "32-200"
                        },
                        new
                        {
                            EmployeeId = new Guid("d16820d4-56d2-43e7-b786-010927874b93"),
                            Address = "Pawia 5",
                            BirthDate = new DateTime(2021, 10, 30, 15, 34, 52, 57, DateTimeKind.Local).AddTicks(5681),
                            City = "Cracov",
                            Email = "kasia@mail.com",
                            FirstName = "Katarzyna",
                            Gender = "Female",
                            HireDate = new DateTime(2021, 10, 30, 15, 34, 52, 57, DateTimeKind.Local).AddTicks(5684),
                            JobRole = "Manager",
                            LastName = "Obokmlyna",
                            PhoneNumber = "999222333",
                            ZipCode = "32-200"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("RistoranteMVC.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("RistoranteMVC.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RistoranteMVC.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("RistoranteMVC.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RistoranteMVC.Models.Dish", b =>
                {
                    b.HasOne("RistoranteMVC.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });
#pragma warning restore 612, 618
        }
    }
}
