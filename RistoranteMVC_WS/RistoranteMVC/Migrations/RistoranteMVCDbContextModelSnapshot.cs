// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RistoranteMVC.Models;

namespace RistoranteMVC.Migrations
{
    [DbContext(typeof(RistoranteMVCDbContext))]
    partial class RistoranteMVCDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "DAFF313F-89DD-4621-BC3F-B6EE1F2A23C6",
                            ConcurrencyStamp = "9bd03e3b-6978-4417-8796-5df6c82e5be9",
                            Name = "Admin",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "D174C90E-6C1D-452C-B91F-CA39C112B73E",
                            RoleId = "DAFF313F-89DD-4621-BC3F-B6EE1F2A23C6"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("RistoranteMVC.Auth.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "D174C90E-6C1D-452C-B91F-CA39C112B73E",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7ab47d50-786f-4f43-ad92-216c3ea4d3e1",
                            Email = "admin@mail.com",
                            EmailConfirmed = true,
                            FirstName = "Janeczek",
                            LastName = "Adminowy",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@MAIL.COM",
                            NormalizedUserName = "JANECZEK",
                            PasswordHash = "AQAAAAEAACcQAAAAEFYO2d2OfMl4SCMZR33E6qIvEi3ba4QHrGCjDF3decpN7xuZoSZC8bHtobtq+6oZOA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "290e675b-ed16-466d-9773-372c0bc25282",
                            TwoFactorEnabled = false,
                            UserName = "Janeczek"
                        });
                });

            modelBuilder.Entity("RistoranteMVC.Models.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("9bcd1113-6b23-4493-bc83-0c80a436430a"),
                            Name = "Pizzas"
                        },
                        new
                        {
                            CategoryId = new Guid("a4b49c2f-93b6-42c7-99c6-524638667afd"),
                            Name = "Pastas"
                        },
                        new
                        {
                            CategoryId = new Guid("c85f1ad9-cef4-4bab-94da-e4dfb466c158"),
                            Name = "Soups"
                        },
                        new
                        {
                            CategoryId = new Guid("10895537-2732-403b-87dc-047ec2535593"),
                            Name = "Desserts"
                        },
                        new
                        {
                            CategoryId = new Guid("d99c5243-4815-4722-9fe3-e27623b8232b"),
                            Name = "Drinks"
                        });
                });

            modelBuilder.Entity("RistoranteMVC.Models.Dish", b =>
                {
                    b.Property<Guid>("DishId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Kcal")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Recommended")
                        .HasColumnType("bit");

                    b.HasKey("DishId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Dishes");

                    b.HasData(
                        new
                        {
                            DishId = new Guid("d265c662-fa5d-4cd8-93db-a5cbd764bb53"),
                            CategoryId = new Guid("9bcd1113-6b23-4493-bc83-0c80a436430a"),
                            Description = "Delicious classic from the pizza family",
                            ImageUrl = "https://cdn.pixabay.com/photo/2016/09/13/18/38/silverware-1667988_960_720.png",
                            Kcal = 600,
                            Name = "Pizza margherita",
                            Price = 25.99m,
                            Recommended = true
                        },
                        new
                        {
                            DishId = new Guid("cd03beb0-66e8-443b-8abd-60872dfc6648"),
                            CategoryId = new Guid("9bcd1113-6b23-4493-bc83-0c80a436430a"),
                            Description = "The best for meetings with friends",
                            ImageUrl = "https://cdn.pixabay.com/photo/2016/09/13/18/38/silverware-1667988_960_720.png",
                            Kcal = 750,
                            Name = "Pizza salami",
                            Price = 31.50m,
                            Recommended = false
                        },
                        new
                        {
                            DishId = new Guid("cc3f8164-319b-44b1-a737-d51b5f816ebc"),
                            CategoryId = new Guid("9bcd1113-6b23-4493-bc83-0c80a436430a"),
                            Description = "American pizza in the Italian version",
                            ImageUrl = "https://cdn.pixabay.com/photo/2016/09/13/18/38/silverware-1667988_960_720.png",
                            Kcal = 800,
                            Name = "Pizza americana",
                            Price = 32.20m,
                            Recommended = false
                        },
                        new
                        {
                            DishId = new Guid("cc2e74ab-0551-4039-9797-4b7c144278cb"),
                            CategoryId = new Guid("9bcd1113-6b23-4493-bc83-0c80a436430a"),
                            Description = "the best cheeses on your favorite pizza",
                            ImageUrl = "https://cdn.pixabay.com/photo/2016/09/13/18/38/silverware-1667988_960_720.png",
                            Kcal = 900,
                            Name = "Four cheeses pizza",
                            Price = 33.90m,
                            Recommended = false
                        },
                        new
                        {
                            DishId = new Guid("9e42e50a-7677-4619-8066-6f6d3075e763"),
                            CategoryId = new Guid("a4b49c2f-93b6-42c7-99c6-524638667afd"),
                            Description = "The best pasta with classic bolognese sauce",
                            ImageUrl = "https://cdn.pixabay.com/photo/2016/09/13/18/38/silverware-1667988_960_720.png",
                            Kcal = 450,
                            Name = "Spaghetti bolognese",
                            Price = 18.20m,
                            Recommended = false
                        },
                        new
                        {
                            DishId = new Guid("f28f54e4-cf96-45ad-9129-bc8d6065c279"),
                            CategoryId = new Guid("a4b49c2f-93b6-42c7-99c6-524638667afd"),
                            Description = "Our kitchen's bestseller",
                            ImageUrl = "https://cdn.pixabay.com/photo/2016/09/13/18/38/silverware-1667988_960_720.png",
                            Kcal = 550,
                            Name = "Spaghetti carbonara",
                            Price = 19.99m,
                            Recommended = true
                        },
                        new
                        {
                            DishId = new Guid("ce45c5fd-f45a-4283-ac7b-f13f77372b9e"),
                            CategoryId = new Guid("a4b49c2f-93b6-42c7-99c6-524638667afd"),
                            Description = "For more hunger",
                            ImageUrl = "https://cdn.pixabay.com/photo/2016/09/13/18/38/silverware-1667988_960_720.png",
                            Kcal = 840,
                            Name = "Lasagne",
                            Price = 36.99m,
                            Recommended = false
                        },
                        new
                        {
                            DishId = new Guid("12c579b6-f3cb-44c5-ad6b-dc81691e8d76"),
                            CategoryId = new Guid("a4b49c2f-93b6-42c7-99c6-524638667afd"),
                            Description = "This taste will surprise you",
                            ImageUrl = "https://cdn.pixabay.com/photo/2016/09/13/18/38/silverware-1667988_960_720.png",
                            Kcal = 410,
                            Name = "Tagliatelle with spinach",
                            Price = 19.99m,
                            Recommended = false
                        },
                        new
                        {
                            DishId = new Guid("3e387e55-6c23-45b9-b73c-cba6f9cb95c1"),
                            CategoryId = new Guid("c85f1ad9-cef4-4bab-94da-e4dfb466c158"),
                            Description = "Its taste comes from the best ingredients",
                            ImageUrl = "https://cdn.pixabay.com/photo/2016/09/13/18/38/silverware-1667988_960_720.png",
                            Kcal = 180,
                            Name = "Creamy tomato soup",
                            Price = 12.99m,
                            Recommended = true
                        },
                        new
                        {
                            DishId = new Guid("fb0e6246-a277-4085-8222-4c4a544ad2c0"),
                            CategoryId = new Guid("c85f1ad9-cef4-4bab-94da-e4dfb466c158"),
                            Description = "Our novelty",
                            ImageUrl = "https://cdn.pixabay.com/photo/2016/09/13/18/38/silverware-1667988_960_720.png",
                            Kcal = 210,
                            Name = "Curry soup",
                            Price = 13.30m,
                            Recommended = false
                        },
                        new
                        {
                            DishId = new Guid("b32bebc8-eb24-4c6b-bb61-847c980de1a7"),
                            CategoryId = new Guid("c85f1ad9-cef4-4bab-94da-e4dfb466c158"),
                            Description = "Tasty and nutritious",
                            ImageUrl = "https://cdn.pixabay.com/photo/2016/09/13/18/38/silverware-1667988_960_720.png",
                            Kcal = 210,
                            Name = "Soup with meatballs",
                            Price = 15.95m,
                            Recommended = false
                        },
                        new
                        {
                            DishId = new Guid("256e241d-6d1b-4241-a025-6fb64032bf3b"),
                            CategoryId = new Guid("c85f1ad9-cef4-4bab-94da-e4dfb466c158"),
                            Description = "Very aromatic dish that will delight everyone",
                            ImageUrl = "https://cdn.pixabay.com/photo/2016/09/13/18/38/silverware-1667988_960_720.png",
                            Kcal = 210,
                            Name = "Mushroom soup",
                            Price = 14.49m,
                            Recommended = false
                        },
                        new
                        {
                            DishId = new Guid("4ef63506-74d4-4509-985f-9f49324f5bf3"),
                            CategoryId = new Guid("10895537-2732-403b-87dc-047ec2535593"),
                            Description = "The best dessert that will impress your other half",
                            ImageUrl = "https://cdn.pixabay.com/photo/2016/09/13/18/38/silverware-1667988_960_720.png",
                            Kcal = 300,
                            Name = "Tiramisu",
                            Price = 10.50m,
                            Recommended = true
                        },
                        new
                        {
                            DishId = new Guid("8df4866e-fddb-4703-a220-193c3a7c03ca"),
                            CategoryId = new Guid("10895537-2732-403b-87dc-047ec2535593"),
                            Description = "Melts in your mouth",
                            ImageUrl = "https://cdn.pixabay.com/photo/2016/09/13/18/38/silverware-1667988_960_720.png",
                            Kcal = 290,
                            Name = "Panna Cotta",
                            Price = 10.40m,
                            Recommended = false
                        },
                        new
                        {
                            DishId = new Guid("c516421d-9979-4909-a5e7-a2800cca08a5"),
                            CategoryId = new Guid("10895537-2732-403b-87dc-047ec2535593"),
                            Description = "Sweet and cold what more could you want",
                            ImageUrl = "https://cdn.pixabay.com/photo/2016/09/13/18/38/silverware-1667988_960_720.png",
                            Kcal = 260,
                            Name = "Ice-creams",
                            Price = 9.10m,
                            Recommended = false
                        },
                        new
                        {
                            DishId = new Guid("caf8fc1d-dcf4-4256-a40e-bff0c983b503"),
                            CategoryId = new Guid("10895537-2732-403b-87dc-047ec2535593"),
                            Description = "It is worth a try",
                            ImageUrl = "https://cdn.pixabay.com/photo/2016/09/13/18/38/silverware-1667988_960_720.png",
                            Kcal = 270,
                            Name = "Granita",
                            Price = 10.05m,
                            Recommended = false
                        },
                        new
                        {
                            DishId = new Guid("0dd36b3c-1644-41c9-8cbd-87e81d0e7361"),
                            CategoryId = new Guid("d99c5243-4815-4722-9fe3-e27623b8232b"),
                            Description = "Just good coffee",
                            ImageUrl = "https://cdn.pixabay.com/photo/2016/09/13/18/38/silverware-1667988_960_720.png",
                            Kcal = 10,
                            Name = "Coffee",
                            Price = 12.99m,
                            Recommended = true
                        },
                        new
                        {
                            DishId = new Guid("c7ae4b88-2d8d-4882-89e5-a7a829845dce"),
                            CategoryId = new Guid("d99c5243-4815-4722-9fe3-e27623b8232b"),
                            Description = "Just good tea",
                            ImageUrl = "https://cdn.pixabay.com/photo/2016/09/13/18/38/silverware-1667988_960_720.png",
                            Kcal = 10,
                            Name = "Tea",
                            Price = 12.99m,
                            Recommended = false
                        },
                        new
                        {
                            DishId = new Guid("27f14300-856c-40d0-8472-56e9015ee9c5"),
                            CategoryId = new Guid("d99c5243-4815-4722-9fe3-e27623b8232b"),
                            Description = "Just water",
                            ImageUrl = "https://cdn.pixabay.com/photo/2016/09/13/18/38/silverware-1667988_960_720.png",
                            Kcal = 10,
                            Name = "Water",
                            Price = 12.99m,
                            Recommended = false
                        },
                        new
                        {
                            DishId = new Guid("a93c301b-9819-43c4-85a2-b8c8367d2338"),
                            CategoryId = new Guid("d99c5243-4815-4722-9fe3-e27623b8232b"),
                            Description = "Just Coca-Cola",
                            ImageUrl = "https://cdn.pixabay.com/photo/2016/09/13/18/38/silverware-1667988_960_720.png",
                            Kcal = 110,
                            Name = "Coca-Cola",
                            Price = 12.99m,
                            Recommended = false
                        });
                });

            modelBuilder.Entity("RistoranteMVC.Models.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderPlaced")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OrderTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("RistoranteMVC.Models.OrderDetail", b =>
                {
                    b.Property<Guid>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<Guid>("DishId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("DishId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("RistoranteMVC.Models.ShoppingCartItem", b =>
                {
                    b.Property<Guid>("ShoppingCartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<Guid?>("DishId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ShoppingCartId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ShoppingCartItemId");

                    b.HasIndex("DishId");

                    b.ToTable("ShoppingCartItems");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("RistoranteMVC.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("RistoranteMVC.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RistoranteMVC.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("RistoranteMVC.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RistoranteMVC.Models.Dish", b =>
                {
                    b.HasOne("RistoranteMVC.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("RistoranteMVC.Models.OrderDetail", b =>
                {
                    b.HasOne("RistoranteMVC.Models.Dish", "Dish")
                        .WithMany()
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RistoranteMVC.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("RistoranteMVC.Models.ShoppingCartItem", b =>
                {
                    b.HasOne("RistoranteMVC.Models.Dish", "Dish")
                        .WithMany()
                        .HasForeignKey("DishId");

                    b.Navigation("Dish");
                });

            modelBuilder.Entity("RistoranteMVC.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
